[[mAConfig]]
= Configuration
:author: Andrzej WÃ³jcik
:version: v2.0 October 2017. Reformatted for v8.0.0.

:toc:
:numbered:
:website: http://www.tigase.net

To enable Tigase Message Archiving Component you need to add following block to `etc/config.tdsl` file:
----
message-archive () {
}
----
It will enable component and configure it under name `message-archive`.
By default it will also use database configured as `default` data source to store data.

== Support for XEP-0136
To be able to use Message Archiving component with http://xmpp.org/extensions/xep-0136.html:[XEP-0136: Message Archiving] protocol, you additionally need to enable `message-archive-xep-0136` SessionManager processor:
----
sess-man {
    message-archive-xep-0136 () {
    }
}
----

== Support for MAM
If you want to use Message Archiving component with http://xmpp.org/extensions/xep-0313.html:[XEP-0313: Message Archive Management] protocol, then you need to enable `urn:xmpp:mam:1` SessionManager processor:
----
sess-man {
    'urn:xmpp:mam:1' () {
    }
}
----

== Setting default value of archiving level for message on a server
Setting this property will change default archiving level for messages for every account on server for which per account default archiving level is not set. User will be able to change this value setting default modes as described in http://xmpp.org/extensions/xep-0136.html#pref-default[XEP-0136 section 2.4]

Possible values are:

false:: Messages are not archived
body:: Only message body will be stored. Message without a body will not be stored with this value set
message:: While message stanza will be archived (if message should be stored, see <<Saving Options>>)
stream:: In this mode every stanza should be archived. _(Not supported)_

To set default level to `message` you need to set `default-store-method` of `message-archive` processor to `message`:
----
sess-man {
    message-archive {
        default-store-method = 'message'
    }
}
----

== Setting required value of archiving level for messages on a server
Settting this property will change required archiving level for messages for every account on server. User will be able to change this to any lower value by setting default modes as described in http://xmpp.org/extensions/xep-0136.html#pref-default[XEP-0136 section 2.4]
but user will be allowed to set higher archiving level. If this property is set to higher value then default archiving level is set then this setting will be used as default archiving level setting.

Possible values for this setting are the same as values for default archiving level setting, see <<Setting default value of archiving level for message on a server>> for list of possible values.

To set required level to `body` you need to set `required-store-method` of `message-archive` processor to `body`:
----
sess-man {
    message-archive {
        required-store-method = `body`
    }
}
----

== Enabling support for tags
To enable this feature Message Archiving component needs to be configured properly. You need to add `tags-support = true` line to `message-archiving` configuration section of `etc/init.properties` file. Like in following example:
----
message-archive {
    tags-support = true
}
----
where:

* `message-archive` - is name of configuration section under which Message Archiving component is configured to run

=== Saving Options
By default, Tigase Message Archive will only store the message body with some metadata, this can exclude messages that are lacking a body.
If you decide you wish to save non-body elements within Message Archive, you can now can now configure this by setting `msg-archive-paths` to list of elements paths which should trigger saving to Message Archive.
To additionally store messages with `<subject/>` element:
-----
sess-man {
    message-archive {
        msg-archive-paths = [ '-/message/result[urn:xmpp:mam:1]' '/message/body', '/message/subject' ]
    }
}
-----
Where above will set the archive to store messages with <body/> or <subject/> elements and for message with `<result xmlns="urn:xmpp:mam:1"/>` element not to be stored.

WARNING: It is recommended to keep entry for not storing message with `<result xmlns="urn:xmpp:mam:1"/>` element as this are results of MAM query and contain messages already stored in archive!

TIP: Enabling this for elements such as iq, or presence will quickly load the archive.  Configure this setting carefully!

== Configuration of automatic archivization of MUC messages
As mentioned above no additional configuration options than default configuration of Message Archiving component and plugin is needed to let user decide if he wants to enable or disable this feature (but it is disabled by default).
In this case user to enable this feature needs to set settings of message archiving adding `muc-save` attribute to `<default/>` element of request with value set to `true` (or to `false` to disable this feature).

To configure state of this feature on installation level, it is required to set `store-muc-messages` property of `message-archive` SessionManager processor:
----
sess-man {
    message-archive {
        store-muc-messages = 'value'
    }
}
----

where `value` may be one of following values:

`user`:: allows value to be set on domain level or by user if domain level setting allows that
`true`:: enables feature for every user in every hosted domain (cannot be overridden by on domain or user level)
`false`:: disables feature for every user in every hosted domain (cannot be overridden by on domain or user level)

To configure state of this feature on domain level, you need to execute vhost configuration command. In list of fields to configure domain, field to set this will be available with following values:

`user`:: allows user to stat of this feature (if allowed on installation level)
`true`:: enables feature for users of configured domain (user will not be able to disable)
`false`:: disables feature for users of configured domain (user will not be able to disable)

== Configuration of automatic removal of old messages
Tigase Message Archiving component is able to automatically remove messages older than configured number of days.
Number of days after which messages are removed is configurable in VHost settings of particular domain hosted by Tigase XMPP Server.
If it is set to 1 day and entry is older than 24 hours then it will be removed, ie. entry from yesterday from 10:11 will be removed after 10:11 after next execution of purge.

To enable this feature you need to set `removeExpiredMessages` property of component to `true`.
message-archive {
    removeExpiredMessages = true
}

Then by default component will execute removal of old messages after an hour of server startup and then after 24 hours since previous execution.
This is also configurable and may be changed to first exection after 30 minutes by setting `removeExpiredMessagesDelay` property to `PT30M` and next execution every 12 hours by setting `removeExpiredMessagesPeriod` to `PT12H`.
----
message-archive {
    removeExpiredMessages = true
    removeExpiredMessagesDelay = 'PT30M'
    removeExpiredMessagesPeriod = 'PT12H'
}
----

TIP: Value of `remove-expired-messages-delay` and `remove-expired-messages-period` is in format described at Duration.parse() in Java documentation.

=== Configuration of number of days in VHost
VHost holds a setting that determines how long a message needs to be in archive for it to be considered old and removed.  This can be set independently per Vhost.  This setting can be modified by either using the HTTP admin, or the update item execution in adhoc command.

This configuration is done by execution of Update item configuration adhoc command of vhost-man component, where you should select domain for which messages should be removed and then in field XEP-0136 - retention type select value Number of days and in field XEP-0136 - retention period (in days) enter number of days after which events should be removed from MA.

In adhoc select domain for which messages should be removed and then in field XEP-0136 - retention type select value Number of days and in field XEP-0136 - retention period (in days) enter number of days after which events should be removed from MA.

In HTTP UI select Other, then Update Item Configuration (Vhost-man), select the domain, and from there you can set XEP-0136 retention type, and set number of days at XEP-0136 retention period (in days).

== Using separate store for archived messages
It is possible to use separate store for archived messages, to do so you need to configure new `DataSource` in `dataSource` section.
Here we will use `message-archive-store` as a name of a data source.
Additionally you need to pass name of newly configured data source to `dataSourceName` property of `default` repository of Message Archiving component.

Example:
----
dataSource {
    message-archive-store () {
        uri = 'jdbc:postgresql://server/message-archive-database'
    }
}

message-archive {
    repositoryPool {
        default () {
            dataSourceName = 'message-archive-store'
        }
    }
}
----

It is also possible to configure separate store for particular domain, ie. `example.com`. Here we will configure data source with name `example.com` and use it to store data for archive:
----
dataSource {
    'example.com' () {
        uri = 'jdbc:postgresql://server/example-database'
    }
}

message-archive {
    repositoryPool {
        'example.com' () {
          # we may not set dataSourceName as it matches name of domain
        }
    }
}
----
[NOTE]
With this configuration messages for other domains than `example.com` will be stored in default data source.
